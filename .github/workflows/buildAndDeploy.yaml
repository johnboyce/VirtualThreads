# buildAndDeploy.yaml

name: 'Build and deploy with terraform'

on:
  push:
    branches:
      - 'main'

env:
  AWS_REGION: us-east-1 # Change to your region
  IAM_ROLE_ARN: arn:aws:iam::020157571320:role/github_actions # Change to github action role arn

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.IAM_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
         java-version: '21'
         distribution: 'temurin'
         cache: maven
         
      - name: Build with Maven
        run: mvn -B package --file pom.xml
    
#      - name: Docker build, tag, and push image to Amazon ECR
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: app-prod-virtualthreads # namespace-stage-name
#        run: |
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_REF_NAME -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
#          docker image push -a $ECR_REGISTRY/$ECR_REPOSITORY

      - name: JIB build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: app-prod-virtualthreads # namespace-stage-name
          FROM_BASE: eclipse-temurin:21.0.1_12-jdk
        run: |
          mvn compile com.google.cloud.tools:jib-maven-plugin:3.4.0:build \
           -Djib.from.image=${FROM_BASE} \
           -Djib.to.image=${ECR_REGISTRY}/${ECR_REPOSITORY} \
           -Djib.to.tags=main,latest \
           -Djib.container.ports.port=3000

  terraform:
    name: Terraform Apply
    needs: build
    runs-on: ubuntu-latest
    environment: production

    defaults:
      run:
        shell: bash

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.IAM_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Plan
        id: plan
        working-directory: ./terraform
        run: terraform plan -var="image_tag=$GITHUB_REF_NAME"
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -var="image_tag=$GITHUB_REF_NAME" -auto-approve
